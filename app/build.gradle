apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
   // compileSdkVersion 32
    //compileSdk 31
//nill added this for pythn bridge
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }
// this is added for pythn bridge
    compileSdkVersion 31

    defaultConfig {
        applicationId "com.arcore.AI_ResourceControl"
       // /* tmp comment
        minSdkVersion 26
        //noinspection ExpiredTargetSdkVersion
        targetSdkVersion 28
      //
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }


//    defaultConfig {
//        minSdkVersion 26
//        targetSdkVersion 32
//        applicationId "com.arcore.AI_ResourceControl"
//        versionCode 1
//        versionName "1.0"
//        //resConfigs "en"
//       // multiDexEnabled true
//    }


    // temp nill add

//    buildscript {
//        ext {
//            buildToolsVersion = "31.0.0"
//            minSdkVersion = 26
//           // compileSdkVersion = 31
//            targetSdkVersion = 31
//        }
//    }
    // tmp


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    aaptOptions {
        noCompress "tflite"
    }
//    allprojects {
//        repositories {
//            mavenCentral()
//            maven {  // Only for snapshot artifacts
//                name 'ossrh-snapshot'
//                url 'http://oss.sonatype.org/content/repositories/snapshots'
//            }
//        }}

    tasks.register("prepareKotlinBuildScriptModel"){}

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_9
        targetCompatibility JavaVersion.VERSION_1_9
    }

}

dependencies {

    /// nill tmp added
    //implementation("com.squareup.okhttp3:okhttp:4.9.2")
 //  implementation 'androidx.work:work-runtime:2.7.1'
   // implementation 'androidx.work:work-runtime-ktx:2.7.1'
/// nill tmp added
// nill added tmp
   // implementation 'com.google.ar:core:1.32.0'
    //implementation 'com.google.ar:core:'
    // nill added tmp
    implementation files('libs/guava-31.1-jre.jar')

    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    implementation 'androidx.appcompat:appcompat:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'
   implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
//    implementation 'androidx.constraintlayout:constraintlayout:2.4.1'
//    implementation 'com.google.android.material:material:1.6.1'
    implementation 'com.google.android.material:material:1.0.0'
    implementation "com.google.ar.sceneform.ux:sceneform-ux:1.7.0"
    implementation files('libs/Jama-1.0.1.jar')
//    implementation files('libs/jep-4.1.1.jar')
//    implementation files('libs/jython.jar')
//    implementation files('libs/cmaes_java.jar')
//    implementation files('libs/cmaEs.jar')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
    //this iis for math3 bayesian functions
    implementation 'org.apache.commons:commons-math3:3.6.1'
    def lifecycle_version = "2.5.0-alpha03"
//    def arch_version = "2.1.0"

    // ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // ViewModel utilities for Compose
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    // Lifecycles only (without ViewModel or LiveData)
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Saved state module for ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version"



    // implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    //implementation 'com.android.support:design:28.0.0'
    //implementation "com.google.ar.sceneform.ux:sceneform-ux:1.7.0"


    //commented 10.20.22 -> deactivates GPU
    //implementation 'org.tensorflow:tensorflow-lite-support:0.1.0-rc1'
    implementation 'org.tensorflow:tensorflow-lite-support:0.4.0'
    //-> deactivates GPU and just activates NPU
  //  implementation 'org.tensorflow:tensorflow-lite:2.0.0'

    //nil implementation 'org.tensorflow:tensorflow-lite-gpu:2.9.0'
    //nil implementation 'org.tensorflow:tensorflow-lite-gpu-delegate-plugin:0.3.0'
    implementation 'org.tensorflow:tensorflow-lite-task-vision:0.4.0'
    implementation 'org.tensorflow:tensorflow-lite-gpu-delegate-plugin:0.4.0'
    implementation 'org.tensorflow:tensorflow-lite-gpu:2.9.0'
    implementation 'androidx.annotation:annotation:1.0.0'
    implementation 'androidx.legacy:legacy-support-v13:1.0.0'
    // Build off of nightly TensorFlow Lite

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
     implementation 'androidx.exifinterface:exifinterface:1.3.2'
}

apply plugin: 'com.google.ar.sceneform.plugin'



def targetFolder = "src/main/assets"
def modelFloatDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/mobilenet_v1_2018_02_22/mobilenet_v1_1.0_224.tgz"
def modelQuantDownloadUrl = "https://storage.googleapis.com/download.tensorflow.org/models/mobilenet_v1_2018_08_02/mobilenet_v1_1.0_224_quant.tgz"
def model_inception_v4_float_url = "https://storage.googleapis.com/download.tensorflow.org/models/tflite/model_zoo/upload_20180427/inception_v4_2018_04_27.tgz"
def localCacheFloat = "build/intermediates/mobilenet_v1_1.0_224.tgz"
def localCacheQuant = "build/intermediates/mmobilenet_v1_1.0_224_quant.tgz"
def localCacheInceptionV4Float = "build/intermediates/inception_v4_2018_04_27.tgz"

//to dl models
//apply from:'download_models.gradle'

//task downloadModelFloat(type: DownloadUrlTask) {
//    doFirst {
//        println "Downloading ${modelFloatDownloadUrl}"
//    }
//    sourceUrl = "${modelFloatDownloadUrl}"
//    target = file("${localCacheFloat}")
//}
//
//task downloadModelQuant(type: DownloadUrlTask) {
//    doFirst {
//        println "Downloading ${modelQuantDownloadUrl}"
//    }
//    sourceUrl = "${modelQuantDownloadUrl}"
//    target = file("${localCacheQuant}")
//}
//task downloadInceptionV4Float(type: DownloadUrlTask) {
//    doFirst {
//        println "Downloading ${model_inception_v4_float_url}"
//    }
//    sourceUrl = "${model_inception_v4_float_url}"
//    target = file("${localCacheInceptionV4Float}")
//}
//
//task unzipModelFloat(type: Copy, dependsOn: 'downloadModelFloat') {
//    doFirst {
//        println "Unzipping ${localCacheFloat}"
//    }
//    from tarTree("${localCacheFloat}")
//    into "${targetFolder}"
//}
//
//task unzipModelQuant(type: Copy, dependsOn: 'downloadModelQuant') {
//    doFirst {
//        println "Unzipping ${localCacheQuant}"
//    }
//    from tarTree("${localCacheQuant}")
//    into "${targetFolder}"
//}
//task unzipModelInceptionV4Float(type: Copy, dependsOn: 'downloadInceptionV4Float') {
//    doFirst {
//        println "Unzipping ${localCacheInceptionV4Float}"
//    }
//    from tarTree("${localCacheInceptionV4Float}")
//    into "${targetFolder}"
//}
//
//task cleanUnusedFiles(type: Delete, dependsOn: ['unzipModelFloat', 'unzipModelQuant', 'unzipModelInceptionV4Float']) {
//    delete fileTree("${targetFolder}").matching {
//        include "*.pb"
//        include "*.ckpt.*"
//        include "*.pbtxt.*"
//        include "*.quant_info.*"
//        include "*.meta"
//    }
//}
//
//
//// Ensure the model file is downloaded and extracted before every build
//preBuild.dependsOn unzipModelFloat
//preBuild.dependsOn unzipModelQuant
//preBuild.dependsOn unzipModelInceptionV4Float
//preBuild.dependsOn cleanUnusedFiles
//repositories {
//    mavenCentral()
//}
//
//class DownloadUrlTask extends DefaultTask {
//    @Input
//    String sourceUrl
//
//    @OutputFile
//    File target
//
//    @TaskAction
//    void download() {
//        ant.get(src: sourceUrl, dest: target)
//    }
//}
